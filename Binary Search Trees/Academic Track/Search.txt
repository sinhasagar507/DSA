1. Worst Case TC for Search - O(h). Usually the average TC is O(nlogn)
2. For a normal BST, search can go upto O(n). This is not the case for a self-balancing binary tree. 
3. Insertion: root->left or root->right is meant for insertion 

// Delete a node from a binary search tree 
TreeNode* deleteNode(TreeNode* root, int key, TreeNode* prev)
{
	if(root == nullptr)
		return nullptr; 

	else if(root->data = key) 
	{
		if(root->left == nullptr and root->right == nullptr) 
		{
		    delete root;   // free up the memory space of the root node 
		    root = nullptr; // Assigning it to null to avoid the issue of dangling pointers 
		}
		
		else
		{
		   TreeNode* newRoot; 
		   if(root->left != nullptr)
		   	newRoot = root->left;
			if(prev != nullptr)
				prev->left = newRoot; 
			if(root->left->left != nullptr) 
				newRoot->left = root->left->left; 
			if(root->right != nullptr and root->right->right != nullptr) 
			 	newRoot->right = root->right->right; 

		   if(root->right != nullptr)
			if(newRoot == nullptr)  
				newRoot = root->right;
			if(root->right->right != nullptr) 
				newRoot->right = root->right->right;  

		   root->left = nullptr;
		   root->right = nullptr; 
		   delete root; 
		   root = null;
		}
	}

	else if(root->data < key) 
		deleteNode(root->right, key, root); 
	
	else if(root->data > key) 
		deleteNode(root->left, key, root); 

	else
	   // The condition where none of the nodes contan the data 

}
		
	// Check if the key corresponds to the root data itself 
	
	if(key < root->data)
	{
		if(key != root->left->data)
		{
			deleteNode(root->left, key); 
		}
		
		else
		{
			TreeNode *lchild = root->left->left; 
			TreeNode *rchild = root->left->right; 
			root->left = rchild;
			rchild->left = lchild; 
			
			// Now even check for rchild ka null as well  
		}
	}
	
	else if(key > root->data)
	{
		if(key != root->right->data)
		{
			deleteNode(root->right, key); 
		}
		
		else 
		{
			deleteNode()
		}
	}

- 2 questions ke baad bhi fse hue ho, review your lecture (Naa main sbb krunga...gaand mrvaunga, 
- Provide 3 edge cases to every problem you do 
- See to the issue of time management (when to stay down) and low...(upr hi manage ho toh better??? hai
- From morning till evening..., naha dhoke yhi baitho
	- Also manage your anxiety levels by sitting down and noting the levels...
- Different GitHub badges 
- Refer this link daily: https://docs.github.com/en/code-security/getting-started/dependabot-quickstart-guide
- Why Doc2vec usually needs more training than Word2Vec? 
- Just data ghusake rkhdo...Finding suitable OR not is none of your concern...
- Not current project ka deployment, just continuous improvement and integration
- Ask this question: What is the ideal length of comments I should be using as reference tweets?
- 1 question bhi ho, krdo...Don't leave it as it is...Persistence and consistency...
	- My mistake
		- Nai hota hai, (log bolte hain ek cheez dhang se krle...dekh sbb dhang se nai ho paayega...but jitna ho skta hai vo krde...) 
	- Dekho 75% tkk pahunche mera current level...questions thode bahut vahan jaake bhi ho jaaye toh chlega...don't beat yourselves up on it...
	- Main jo ideal routine mein give baithta huin that is "normal Sagar", not the "beastly Sagar" 	- Data Extraction from Amazon Global, Amazon US, Amazon India, Amazon Prime and Amazon Prime India??? 
	- Which phones work in US as well as India?
		- See to it 
	- Explore CPEditor later on...


	