/*  Passing 2-D arrays as parameters in CPP */

#include<bits/stdc++.h>
using namespace std;

// You can also pass to the function as arr[][n];
// The array can be passed as print(int *arr, int m, int n). This is used when you assign as an array of pointers. Using the single pointer approach.  
// The next way consists of print(int *arr[], int m, int n). This too works for any dimension. 
// You will pass only a vector at the end. Use print(vector<int>v[], int m). 
// When you define vector<vector<int>> v, you must also define another vector to nest it within the main vector. 

void print(int arr[m][n]) 
{
    for(int i=0; i<m; i++)
    {
        for(int j=0; j<n; j++)
            cout<<arr[i][j];
    }
}

int main()
{
  int n, m;
  cin>>n>>m;
  
  int arr[m][n];
  
  for(int i=0; i<m; i++)
        for(int j=0; j<n; j++)
            cin>>[i][j];
            
  printArray(arr);
}


Some important notes 
1. Elements are stored in row-major order(2000, 2004, 2008, 2012, 2016, 2020)
2. Internal curly brackets are optional. I mean I can define a 2-D array as int arr[3][2]={10, 20, 30, 40, 50, 60}
3. Only the first dimension can be omitted when we initialize. int arr[][3][2] = {{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}}
4. Double pointer approach to creating 2-D arrays. int **arr; arr = new int *[m]; Then I can create a variable-sized array as: for(int i=0; i<m; i++)	arr[i] = new int[i+1];
5. Even create an array of pointers. I define int *arr[m]. Then I individually assign sizes as above. (Not cache friendly)
6. Create a vector of individual arrays as: vector<int> v(m); (Not cache friendly)(Individual rows are of dynamic sizes)(Easy to pass to a function)
7. Define a vector of vectors. Even number of arrays can be dynamic

Passing 2-D matrix as an argument in CPP:
1. passPrint(int arr[][n], int m)
2. passPrint(int arr[M][N]).
3. passPrint(int **arr, int m, int n) OR passPrint(int *arr[], int m, int n)
4. Passing a vector of vectors(vector<vector<int>> &arr. Complete jagged array. Easy to pass to a function. INDIVIDUAL ROWS AT DIFFERENT LOCATIONS IN MEMORY, BUT INDIVIDUAL COLUMNS ARE AT CONTIGUOUS LOCATIONS. 